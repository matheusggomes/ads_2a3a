package ctrlfit.telas;

import ctrlfit.conexao.PlanoDAO;
import ctrlfit.entity.Plano;
import ctrlfit.excel.ExportarExcel;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class GerenciamentoPlanos extends javax.swing.JFrame {

    private boolean pesquisarPlano = false;

    public GerenciamentoPlanos() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/ctrlfit/icons/logo_haltere2.png")));
        jTablePlanos.setDefaultEditor(Object.class, null);//Deixa a jTable não editavel
        carregarDadosPlanos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTablePlanos = new javax.swing.JTable();
        btnCadastrarPlano = new javax.swing.JButton();
        btnExibirPlano = new javax.swing.JButton();
        btnExcluirPlano = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtPesquisarPlano = new javax.swing.JTextField();
        btnPesquisar = new javax.swing.JButton();
        btnAtualizar = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gerenciamento de Planos");
        setResizable(false);

        jTablePlanos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Código", "Nome", "Preço", "Duração (em meses)"
            }
        ));
        jTablePlanos.setFocusable(false);
        jTablePlanos.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTablePlanos);

        btnCadastrarPlano.setText("Cadastrar");
        btnCadastrarPlano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarPlanoActionPerformed(evt);
            }
        });

        btnExibirPlano.setText("Exibir");
        btnExibirPlano.setToolTipText("Exibir ou Alterar dados");
        btnExibirPlano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExibirPlanoActionPerformed(evt);
            }
        });

        btnExcluirPlano.setText("Excluir");
        btnExcluirPlano.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirPlanoActionPerformed(evt);
            }
        });

        jLabel1.setText("Pesquisar Plano:");

        btnPesquisar.setText("Pesquisar");
        btnPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarActionPerformed(evt);
            }
        });

        btnAtualizar.setText("Atualizar");
        btnAtualizar.setFocusable(false);
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        btnExportar.setText("Exportar");
        btnExportar.setToolTipText("Exportar para Excel");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 789, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisarPlano, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPesquisar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCadastrarPlano)
                        .addGap(18, 18, 18)
                        .addComponent(btnExibirPlano)
                        .addGap(18, 18, 18)
                        .addComponent(btnExcluirPlano))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAtualizar, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnExportar, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAtualizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCadastrarPlano)
                    .addComponent(btnExibirPlano)
                    .addComponent(btnExcluirPlano)
                    .addComponent(txtPesquisarPlano, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisar)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExportar)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCadastrarPlanoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarPlanoActionPerformed
        CadastroPlano cadastroPlano = new CadastroPlano(this);
        cadastroPlano.setVisible(true);
    }//GEN-LAST:event_btnCadastrarPlanoActionPerformed

    private void btnExibirPlanoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExibirPlanoActionPerformed
        //armazena o indice da linha na variavel linhaSelecionada, a primeira linha é 0, -1 para nenhuma linha selecionada
        int linhaSelecionada = jTablePlanos.getSelectedRow();

        if (linhaSelecionada != -1) {
            //obetr os valores da linha selecionada
            int codigo = (int) jTablePlanos.getValueAt(linhaSelecionada, 0);

            Plano objPlano = new Plano();
            objPlano.setCodigo(codigo);

            PlanoDAO objPlanoDao = new PlanoDAO();
            objPlano = objPlanoDao.exibirPlano(objPlano);

            CadastroPlano cadastroPlano = new CadastroPlano(this, objPlano);
            cadastroPlano.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para exibir.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnExibirPlanoActionPerformed

    private void btnExcluirPlanoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirPlanoActionPerformed
        //armazena o indice da linha na variavel linhaSelecionada, a primeira linha é 0, -1 para nenhuma linha selecionada
        int linhaSelecionada = jTablePlanos.getSelectedRow();

        if (linhaSelecionada != -1) {
            // Obter o codigo da linha selecionada
            int codigo = (int) jTablePlanos.getValueAt(linhaSelecionada, 0);

            Plano objPlano = new Plano();
            objPlano.setCodigo(codigo);

            // Tela para confirmar exclusão
            //int resposta = JOptionPane.showConfirmDialog(null, "Você deseja realmente excluir esse exercício?");
            Object[] opcoes = {"Sim", "Não"};
            int resposta = JOptionPane.showOptionDialog(
                    this,
                    "Você deseja realmente excluir esse plano?",
                    "Confirmação de Exclusão",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null, // Ícone padrão
                    opcoes, // Opções de botões personalizadas
                    opcoes[0] // Opção padrão selecionada
            );

            if (resposta == JOptionPane.YES_OPTION) {
                PlanoDAO objPlanoDao = new PlanoDAO();
                objPlanoDao.excluirPlano(objPlano);
                carregarDadosPlanos();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma linha para excluir.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnExcluirPlanoActionPerformed

    private void btnPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarActionPerformed
        if (txtPesquisarPlano.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Digite o nome do plano para pesquisar.", "Aviso", JOptionPane.WARNING_MESSAGE);
        } else {
            pesquisarPlano = true;
            carregarDadosPlanos();
        }
    }//GEN-LAST:event_btnPesquisarActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        pesquisarPlano = false;
        carregarDadosPlanos();
        txtPesquisarPlano.setText("");
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        ExportarExcel exportar = new ExportarExcel();
        exportar.exportar(jTablePlanos);
    }//GEN-LAST:event_btnExportarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnCadastrarPlano;
    private javax.swing.JButton btnExcluirPlano;
    private javax.swing.JButton btnExibirPlano;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTablePlanos;
    private javax.swing.JTextField txtPesquisarPlano;
    // End of variables declaration//GEN-END:variables

    public void carregarDadosPlanos() {
        try {
            Connection conexao = ctrlfit.conexao.ConexaoDAO.conectarBD();
            String sql = "";
            PreparedStatement st;

            if (pesquisarPlano) {
                String nomePlano = txtPesquisarPlano.getText();
                sql = "SELECT CodigoMensalidade_Plano, NomeMensalidade_Plano, PrecoMensalidade_Plano, DuracaoMensalidade_Plano FROM mensalidade_plano WHERE NomeMensalidade_Plano LIKE ?";

                st = conexao.prepareStatement(sql);
                st.setString(1, "%" + nomePlano + "%");// Define o valor para o parâmetro
            } else {
                sql = "SELECT CodigoMensalidade_Plano, NomeMensalidade_Plano, PrecoMensalidade_Plano, DuracaoMensalidade_Plano FROM mensalidade_plano";
                st = conexao.prepareStatement(sql);

            }

            ResultSet rs = st.executeQuery();

            // Obter o modelo da tabela e limpar dados anteriores
            DefaultTableModel model = (DefaultTableModel) jTablePlanos.getModel();
            model.setRowCount(0);

            // Iterar pelos resultados e adicionar à tabela
            while (rs.next()) {
                int codigo = rs.getInt("CodigoMensalidade_Plano");
                String nome = rs.getString("NomeMensalidade_Plano");
                String preco = rs.getString("PrecoMensalidade_Plano");
                String duracao = rs.getString("DuracaoMensalidade_Plano");
                model.addRow(new Object[]{codigo, nome, preco, duracao});
            }
        } catch (SQLException e) {
            System.out.println("Erro ao carregar dados: " + e.getMessage());
        }
    }

}
