package ctrlfit.telas;

import ctrlfit.conexao.AlunoDAO;
import ctrlfit.excel.ExportarExcel;
import ctrlfit.entity.Aluno;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class GerenciamentoAlunos extends javax.swing.JFrame {

    private boolean pesquisarAluno = false;

    public GerenciamentoAlunos() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/ctrlfit/icons/logo_haltere2.png")));//icone da janela
        jTableAlunos.setDefaultEditor(Object.class, null);//Deixa a jTable não editavel
        carregarDadosAlunos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTableAlunos = new javax.swing.JTable();
        btnCadastrarAluno = new javax.swing.JButton();
        btnExibirAluno = new javax.swing.JButton();
        btnExcluirAluno = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtPesquisarAluno = new javax.swing.JTextField();
        btnPesquisarAluno = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxMostrarAlunos = new javax.swing.JComboBox<>();
        btnAtualizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gerenciamento de Alunos");
        setResizable(false);

        jTableAlunos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Matrícula", "Nome", "CPF", "Data Nascimento", "Celular", "Situação Matrícula"
            }
        ));
        jTableAlunos.setFocusable(false);
        jTableAlunos.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTableAlunos);
        if (jTableAlunos.getColumnModel().getColumnCount() > 0) {
            jTableAlunos.getColumnModel().getColumn(0).setPreferredWidth(25);
            jTableAlunos.getColumnModel().getColumn(1).setPreferredWidth(200);
        }

        btnCadastrarAluno.setText("Cadastrar");
        btnCadastrarAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarAlunoActionPerformed(evt);
            }
        });

        btnExibirAluno.setText("Exibir");
        btnExibirAluno.setToolTipText("Exibir ou Alterar dados");
        btnExibirAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExibirAlunoActionPerformed(evt);
            }
        });

        btnExcluirAluno.setText("Excluir");
        btnExcluirAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirAlunoActionPerformed(evt);
            }
        });

        jLabel1.setText("Pesquisar Aluno:");

        btnPesquisarAluno.setText("Pesquisar");
        btnPesquisarAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarAlunoActionPerformed(evt);
            }
        });

        btnExportar.setText("Exportar");
        btnExportar.setToolTipText("Exportar para Excel");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        jLabel2.setText("Mostrar:");

        jComboBoxMostrarAlunos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos os alunos", "Alunos com matrícula ativa", "Alunos com matrícula pendente", "Alunos com matrícula encerrada" }));
        jComboBoxMostrarAlunos.setFocusable(false);
        jComboBoxMostrarAlunos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxMostrarAlunosActionPerformed(evt);
            }
        });

        btnAtualizar.setText("Atualizar");
        btnAtualizar.setFocusable(false);
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 789, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPesquisarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPesquisarAluno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCadastrarAluno)
                        .addGap(18, 18, 18)
                        .addComponent(btnExibirAluno)
                        .addGap(18, 18, 18)
                        .addComponent(btnExcluirAluno))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxMostrarAlunos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAtualizar))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnExportar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxMostrarAlunos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAtualizar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCadastrarAluno)
                    .addComponent(btnExibirAluno)
                    .addComponent(btnExcluirAluno)
                    .addComponent(jLabel1)
                    .addComponent(txtPesquisarAluno, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisarAluno))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExportar)
                .addGap(9, 9, 9))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCadastrarAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarAlunoActionPerformed
        CadastroAluno cadastroAluno = new CadastroAluno(this);
        cadastroAluno.setVisible(true);
    }//GEN-LAST:event_btnCadastrarAlunoActionPerformed

    private void btnExibirAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExibirAlunoActionPerformed
        //armazena o indice da linha na variavel linhaSelecionada, a primeira linha é 0, -1 para nenhuma linha selecionada
        int linhaSelecionada = jTableAlunos.getSelectedRow();

        if (linhaSelecionada != -1) {
            //obetr os valores da linha selecionada
            int matricula = (int) jTableAlunos.getValueAt(linhaSelecionada, 0);

            Aluno objAluno = new Aluno();
            objAluno.setMatricula(matricula);

            AlunoDAO objAlunoDAO = new AlunoDAO();
            objAluno = objAlunoDAO.exibirAluno(objAluno);

            CadastroAluno cadastroAluno = new CadastroAluno(this, objAluno);
            cadastroAluno.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para exibir.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnExibirAlunoActionPerformed

    private void btnExcluirAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirAlunoActionPerformed
        //armazena o indice da linha na variavel linhaSelecionada, a primeira linha é 0, -1 para nenhuma linha selecionada
        int linhaSelecionada = jTableAlunos.getSelectedRow();

        if (linhaSelecionada != -1) {
            // Obter o codigo da linha selecionada
            int matricula = (int) jTableAlunos.getValueAt(linhaSelecionada, 0);

            Aluno objAluno = new Aluno();
            objAluno.setMatricula(matricula);

            Object[] opcoes = {"Sim", "Não"};
            int resposta = JOptionPane.showOptionDialog(
                    this,
                    "Você tem certeza que deseja excluir esse aluno(a)?\n \nO pagamento e a ficha de treino do aluno(a) também serão excluídos.",
                    "Confirmação de Exclusão",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null, // Ícone padrão
                    opcoes, // Opções de botões personalizadas
                    opcoes[0] // Opção padrão selecionada
            );

            if (resposta == JOptionPane.YES_OPTION) {
                AlunoDAO objAlunoDAO = new AlunoDAO();
                objAlunoDAO.excluirAluno(objAluno);
                carregarDadosAlunos();
            }

        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma linha para excluir.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnExcluirAlunoActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        ExportarExcel exportar = new ExportarExcel();
        exportar.exportar(jTableAlunos);
    }//GEN-LAST:event_btnExportarActionPerformed

    private void jComboBoxMostrarAlunosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxMostrarAlunosActionPerformed
        carregarDadosAlunos();
    }//GEN-LAST:event_jComboBoxMostrarAlunosActionPerformed

    private void btnPesquisarAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarAlunoActionPerformed
        if (txtPesquisarAluno.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Digite o nome do aluno(a) para pesquisar.", "Aviso", JOptionPane.WARNING_MESSAGE);
        } else {
            pesquisarAluno = true;
            carregarDadosAlunos();
            jComboBoxMostrarAlunos.setSelectedIndex(0);
        }
    }//GEN-LAST:event_btnPesquisarAlunoActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        pesquisarAluno = false;
        carregarDadosAlunos();
        txtPesquisarAluno.setText("");
        jComboBoxMostrarAlunos.setSelectedIndex(0);
    }//GEN-LAST:event_btnAtualizarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnCadastrarAluno;
    private javax.swing.JButton btnExcluirAluno;
    private javax.swing.JButton btnExibirAluno;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnPesquisarAluno;
    private javax.swing.JComboBox<String> jComboBoxMostrarAlunos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableAlunos;
    private javax.swing.JTextField txtPesquisarAluno;
    // End of variables declaration//GEN-END:variables

    public void carregarDadosAlunos() {
        AlunoDAO objAlunoDao = new AlunoDAO();
        objAlunoDao.atualizarSituacaoAlunos();
        try {
            Connection conexao = ctrlfit.conexao.ConexaoDAO.conectarBD();

            String sql = "";
            PreparedStatement st;

            if (pesquisarAluno) {
                String nomeAluno = txtPesquisarAluno.getText();
                int opcao = jComboBoxMostrarAlunos.getSelectedIndex();

                if (opcao == 1) {
                    sql = "SELECT a.Matricula_Aluno, a.Nome_Aluno, DATE_FORMAT(a.DtNascimento_Aluno, '%d/%m/%Y') AS DtNascimento_Aluno, a.Celular_Aluno, a.Cpf_Aluno, p.Situacao_Aluno "
                            + "FROM aluno a LEFT JOIN pagamento p ON a.Matricula_Aluno = p.Aluno_Matricula_Aluno WHERE Nome_Aluno LIKE ? AND Situacao_Aluno = 'Ativa'";
                } else if (opcao == 2) {
                    sql = "SELECT a.Matricula_Aluno, a.Nome_Aluno, DATE_FORMAT(a.DtNascimento_Aluno, '%d/%m/%Y') AS DtNascimento_Aluno, a.Celular_Aluno, a.Cpf_Aluno, p.Situacao_Aluno "
                            + "FROM aluno a LEFT JOIN pagamento p ON a.Matricula_Aluno = p.Aluno_Matricula_Aluno WHERE Nome_Aluno LIKE ? AND Situacao_Aluno = 'Pendente'";
                } else if (opcao == 3) {
                    sql = "SELECT a.Matricula_Aluno, a.Nome_Aluno, DATE_FORMAT(a.DtNascimento_Aluno, '%d/%m/%Y') AS DtNascimento_Aluno, a.Celular_Aluno, a.Cpf_Aluno, p.Situacao_Aluno "
                            + "FROM aluno a LEFT JOIN pagamento p ON a.Matricula_Aluno = p.Aluno_Matricula_Aluno WHERE Nome_Aluno LIKE ? AND Situacao_Aluno = 'Encerrada'";
                } else {
                    sql = "SELECT a.Matricula_Aluno, a.Nome_Aluno, DATE_FORMAT(a.DtNascimento_Aluno, '%d/%m/%Y') AS DtNascimento_Aluno, a.Celular_Aluno, a.Cpf_Aluno, p.Situacao_Aluno "
                            + "FROM aluno a LEFT JOIN pagamento p ON a.Matricula_Aluno = p.Aluno_Matricula_Aluno WHERE Nome_Aluno LIKE ?";
                }

                st = conexao.prepareStatement(sql);
                st.setString(1, "%" + nomeAluno + "%");
            } else {
                int opcao = jComboBoxMostrarAlunos.getSelectedIndex();

                if (opcao == 1) {
                    sql = "SELECT a.Matricula_Aluno, a.Nome_Aluno, DATE_FORMAT(a.DtNascimento_Aluno, '%d/%m/%Y') AS DtNascimento_Aluno, a.Celular_Aluno, a.Cpf_Aluno, p.Situacao_Aluno "
                            + "FROM aluno a LEFT JOIN pagamento p ON a.Matricula_Aluno = p.Aluno_Matricula_Aluno WHERE Situacao_Aluno = 'Ativa'";
                } else if (opcao == 2) {
                    sql = "SELECT a.Matricula_Aluno, a.Nome_Aluno, DATE_FORMAT(a.DtNascimento_Aluno, '%d/%m/%Y') AS DtNascimento_Aluno, a.Celular_Aluno, a.Cpf_Aluno, p.Situacao_Aluno "
                            + "FROM aluno a LEFT JOIN pagamento p ON a.Matricula_Aluno = p.Aluno_Matricula_Aluno WHERE Situacao_Aluno = 'Pendente'";
                } else if (opcao == 3) {
                    sql = "SELECT a.Matricula_Aluno, a.Nome_Aluno, DATE_FORMAT(a.DtNascimento_Aluno, '%d/%m/%Y') AS DtNascimento_Aluno, a.Celular_Aluno, a.Cpf_Aluno, p.Situacao_Aluno "
                            + "FROM aluno a LEFT JOIN pagamento p ON a.Matricula_Aluno = p.Aluno_Matricula_Aluno WHERE Situacao_Aluno = 'Encerrada'";
                } else {
                    sql = "SELECT a.Matricula_Aluno, a.Nome_Aluno, DATE_FORMAT(a.DtNascimento_Aluno, '%d/%m/%Y') AS DtNascimento_Aluno, a.Celular_Aluno, a.Cpf_Aluno, p.Situacao_Aluno "
                            + "FROM aluno a LEFT JOIN pagamento p ON a.Matricula_Aluno = p.Aluno_Matricula_Aluno";
                }

                st = conexao.prepareStatement(sql);
            }

            ResultSet rs = st.executeQuery();

            // Obter o modelo da tabela e limpar dados anteriores
            DefaultTableModel model = (DefaultTableModel) jTableAlunos.getModel();
            model.setRowCount(0);

            // Iterar pelos resultados e adicionar à tabela
            while (rs.next()) {
                int matricula = rs.getInt("Matricula_Aluno");
                String nome = rs.getString("Nome_Aluno");
                String dtNascimento = rs.getString("DtNascimento_Aluno");
                String celular = rs.getString("Celular_Aluno");
                String cpf = rs.getString("Cpf_Aluno");
                String situacao = rs.getString("Situacao_Aluno");
                model.addRow(new Object[]{matricula, nome, cpf, dtNascimento, celular, situacao});
            }

        } catch (SQLException e) {
            System.out.println("Erro ao carregar dados: " + e.getMessage());
        }
    }

}
