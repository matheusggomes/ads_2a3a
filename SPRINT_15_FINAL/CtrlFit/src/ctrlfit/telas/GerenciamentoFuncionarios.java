package ctrlfit.telas;

import ctrlfit.conexao.FuncionarioDAO;
import ctrlfit.entity.Funcionario;
import ctrlfit.excel.ExportarExcel;
import java.awt.Toolkit;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class GerenciamentoFuncionarios extends javax.swing.JFrame {

    private boolean pesquisarFuncionario = false;

    public GerenciamentoFuncionarios() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/ctrlfit/icons/logo_haltere2.png")));
        jTableFuncionarios.setDefaultEditor(Object.class, null);//Deixa a jTable não editavel
        carregarDadosFuncionarios();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTableFuncionarios = new javax.swing.JTable();
        btnCadastrarFuncionario = new javax.swing.JButton();
        btnExibirFuncionario = new javax.swing.JButton();
        btnExcluirFuncionario = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtPesquisarFuncionario = new javax.swing.JTextField();
        btnPesquisarFuncionario = new javax.swing.JButton();
        btnExportar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxPesquisarFuncionario = new javax.swing.JComboBox<>();
        btnAtualizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gerenciamento de Funcionários");
        setResizable(false);

        jTableFuncionarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "Código", "Nome ", "Cargo", "Celular", "Usuário", "Senha"
            }
        ));
        jTableFuncionarios.setFocusable(false);
        jTableFuncionarios.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTableFuncionarios);
        if (jTableFuncionarios.getColumnModel().getColumnCount() > 0) {
            jTableFuncionarios.getColumnModel().getColumn(0).setPreferredWidth(20);
            jTableFuncionarios.getColumnModel().getColumn(1).setPreferredWidth(200);
            jTableFuncionarios.getColumnModel().getColumn(4).setPreferredWidth(180);
        }

        btnCadastrarFuncionario.setText("Cadastrar");
        btnCadastrarFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarFuncionarioActionPerformed(evt);
            }
        });

        btnExibirFuncionario.setText("Exibir");
        btnExibirFuncionario.setToolTipText("Exibir ou Alterar dados");
        btnExibirFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExibirFuncionarioActionPerformed(evt);
            }
        });

        btnExcluirFuncionario.setText("Excluir");
        btnExcluirFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirFuncionarioActionPerformed(evt);
            }
        });

        jLabel1.setText("Pesquisar Funcionário:");

        btnPesquisarFuncionario.setText("Pesquisar");
        btnPesquisarFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisarFuncionarioActionPerformed(evt);
            }
        });

        btnExportar.setText("Exportar");
        btnExportar.setToolTipText("Exportar para Excel");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportarActionPerformed(evt);
            }
        });

        jLabel2.setText("Mostrar:");

        jComboBoxPesquisarFuncionario.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Todos os funcionários", "Recepcionista", "Instrutor", "Gerente", "Outro" }));
        jComboBoxPesquisarFuncionario.setFocusable(false);
        jComboBoxPesquisarFuncionario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxPesquisarFuncionarioActionPerformed(evt);
            }
        });

        btnAtualizar.setText("Atualizar");
        btnAtualizar.setToolTipText("Resetar visualização");
        btnAtualizar.setFocusable(false);
        btnAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnExportar))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 810, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPesquisarFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnPesquisarFuncionario)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnCadastrarFuncionario)
                                .addGap(18, 18, 18)
                                .addComponent(btnExibirFuncionario)
                                .addGap(18, 18, 18)
                                .addComponent(btnExcluirFuncionario))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboBoxPesquisarFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAtualizar)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxPesquisarFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAtualizar))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCadastrarFuncionario)
                    .addComponent(btnExibirFuncionario)
                    .addComponent(btnExcluirFuncionario)
                    .addComponent(jLabel1)
                    .addComponent(txtPesquisarFuncionario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisarFuncionario))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExportar)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnCadastrarFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarFuncionarioActionPerformed
        // TODO add your handling code here:
        CadastroFuncionario cadastroFuncionario = new CadastroFuncionario(this);
        cadastroFuncionario.setVisible(true);
    }//GEN-LAST:event_btnCadastrarFuncionarioActionPerformed

    private void btnPesquisarFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisarFuncionarioActionPerformed
        if (txtPesquisarFuncionario.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Digite o nome do funcionário(a) para pesquisar.", "Aviso", JOptionPane.WARNING_MESSAGE);
        } else {
            pesquisarFuncionario = true;
            carregarDadosFuncionarios();
            jComboBoxPesquisarFuncionario.setSelectedIndex(0);
        }
    }//GEN-LAST:event_btnPesquisarFuncionarioActionPerformed

    private void btnExibirFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExibirFuncionarioActionPerformed
        //armazena o indice da linha na variavel linhaSelecionada, a primeira linha é 0, -1 para nenhuma linha selecionada
        int linhaSelecionada = jTableFuncionarios.getSelectedRow();

        if (linhaSelecionada != -1) {
            //obetr os valores da linha selecionada
            int codigo = (int) jTableFuncionarios.getValueAt(linhaSelecionada, 0);

            Funcionario objFuncionario = new Funcionario();
            objFuncionario.setCodigo(codigo);

            FuncionarioDAO objFuncionarioDao = new FuncionarioDAO();
            objFuncionario = objFuncionarioDao.exibirFuncionario(objFuncionario);

            CadastroFuncionario cadastroFunc = new CadastroFuncionario(this, objFuncionario);
            cadastroFunc.setVisible(true);

            //chama o metodo trazerDados da classse CadastroExercicio passando como parametro os valores da linha selecionada
            //cadastroFunc.trazerDados(codigo, nomeFunc, cargoFunc, cpfFunc, dtNascimentoFunc, telefoneFunc, celularFunc, enderecoFunc, bairroFunc, cepFunc, sexoFunc, salarioFunc, dtAdmissaoFunc, emailFunc, usuarioFunc, senhaFunc);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para exibir.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnExibirFuncionarioActionPerformed

    private void btnExcluirFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirFuncionarioActionPerformed
        //armazena o indice da linha na variavel linhaSelecionada, a primeira linha é 0, -1 para nenhuma linha selecionada
        int linhaSelecionada = jTableFuncionarios.getSelectedRow();

        if (linhaSelecionada != -1) {
            // Obter o codigo da linha selecionada
            int codigo = (int) jTableFuncionarios.getValueAt(linhaSelecionada, 0);

            Funcionario objFuncionario = new Funcionario();
            objFuncionario.setCodigo(codigo);

            Object[] opcoes = {"Sim", "Não"};
            int resposta = JOptionPane.showOptionDialog(
                    this,
                    "Você deseja realmente excluir esse funcionário?",
                    "Confirmação de Exclusão",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.QUESTION_MESSAGE,
                    null, // Ícone padrão
                    opcoes, // Opções de botões personalizadas
                    opcoes[0] // Opção padrão selecionada
            );

            if (resposta == JOptionPane.YES_OPTION) {
                FuncionarioDAO objFuncionarioDao = new FuncionarioDAO();
                objFuncionarioDao.excluirFuncionario(objFuncionario);
                carregarDadosFuncionarios();
            }

        } else {
            JOptionPane.showMessageDialog(this, "Selecione uma linha para excluir.", "Aviso", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnExcluirFuncionarioActionPerformed

    private void jComboBoxPesquisarFuncionarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxPesquisarFuncionarioActionPerformed
        carregarDadosFuncionarios();
    }//GEN-LAST:event_jComboBoxPesquisarFuncionarioActionPerformed

    private void btnAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizarActionPerformed
        // TODO add your handling code here:                                             
        pesquisarFuncionario = false;
        carregarDadosFuncionarios();
        txtPesquisarFuncionario.setText("");
        jComboBoxPesquisarFuncionario.setSelectedIndex(0);
    }//GEN-LAST:event_btnAtualizarActionPerformed

    private void btnExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportarActionPerformed
        ExportarExcel exportar = new ExportarExcel();
        exportar.exportar(jTableFuncionarios);
    }//GEN-LAST:event_btnExportarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtualizar;
    private javax.swing.JButton btnCadastrarFuncionario;
    private javax.swing.JButton btnExcluirFuncionario;
    private javax.swing.JButton btnExibirFuncionario;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnPesquisarFuncionario;
    private javax.swing.JComboBox<String> jComboBoxPesquisarFuncionario;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableFuncionarios;
    private javax.swing.JTextField txtPesquisarFuncionario;
    // End of variables declaration//GEN-END:variables

    public void carregarDadosFuncionarios() {
        try {
            Connection conexao = ctrlfit.conexao.ConexaoDAO.conectarBD();

            String sql = "";
            PreparedStatement st;

            if (pesquisarFuncionario) {
                String nomeFuncionario = txtPesquisarFuncionario.getText();
                int opcao = jComboBoxPesquisarFuncionario.getSelectedIndex();

                if (opcao == 1) {
                    sql = "SELECT Codigo_Func, Nome_Func, Cargo_Func, Celular_Func, Usuario_Func, Senha_Func "
                            + "FROM funcionario WHERE Nome_Func LIKE ? AND Cargo_Func = 'Recepcionista'";
                } else if (opcao == 2) {
                    sql = "SELECT Codigo_Func, Nome_Func, Cargo_Func, Celular_Func, Usuario_Func, Senha_Func "
                            + "FROM funcionario WHERE Nome_Func LIKE ? AND Cargo_Func = 'Instrutor'";
                } else if (opcao == 3) {
                    sql = "SELECT Codigo_Func, Nome_Func, Cargo_Func, Celular_Func, Usuario_Func, Senha_Func "
                            + "FROM funcionario WHERE Nome_Func LIKE ? AND Cargo_Func = 'Gerente'";
                } else if (opcao == 4) {
                    sql = "SELECT Codigo_Func, Nome_Func, Cargo_Func, Celular_Func, Usuario_Func, Senha_Func "
                            + "FROM funcionario WHERE Nome_Func LIKE ? AND Cargo_Func = 'Outro'";
                }else {
                    sql = "SELECT Codigo_Func, Nome_Func, Cargo_Func, Celular_Func, Usuario_Func, Senha_Func "
                            + "FROM funcionario WHERE Nome_Func LIKE ?";
                }

                st = conexao.prepareStatement(sql);
                st.setString(1, "%" + nomeFuncionario + "%");// Define o valor para o parâmetro

            } else {
                int opcao = jComboBoxPesquisarFuncionario.getSelectedIndex();

                if (opcao == 1) {
                    sql = "SELECT Codigo_Func, Nome_Func, Cargo_Func, Celular_Func, Usuario_Func, Senha_Func FROM funcionario WHERE Cargo_Func = 'Recepcionista'";
                } else if (opcao == 2) {
                    sql = "SELECT Codigo_Func, Nome_Func, Cargo_Func, Celular_Func, Usuario_Func, Senha_Func FROM funcionario WHERE Cargo_Func = 'Instrutor'";
                } else if (opcao == 3) {
                    sql = "SELECT Codigo_Func, Nome_Func, Cargo_Func, Celular_Func, Usuario_Func, Senha_Func FROM funcionario WHERE Cargo_Func = 'Gerente'";
                } else if (opcao == 4) {
                    sql = "SELECT Codigo_Func, Nome_Func, Cargo_Func, Celular_Func, Usuario_Func, Senha_Func FROM funcionario WHERE Cargo_Func = 'Outro'";
                }else {
                    sql = "SELECT Codigo_Func, Nome_Func, Cargo_Func, Celular_Func, Usuario_Func, Senha_Func FROM funcionario";
                }

                st = conexao.prepareStatement(sql);
            }

            ResultSet rs = st.executeQuery();

            // Obter o modelo da tabela e limpar dados anteriores
            DefaultTableModel model = (DefaultTableModel) jTableFuncionarios.getModel();
            model.setRowCount(0);

            // Iterar pelos resultados e adicionar à tabela
            while (rs.next()) {
                int codigo = rs.getInt("Codigo_Func");
                String nome = rs.getString("Nome_Func");
                String cargo = rs.getString("Cargo_Func");
                String celular = rs.getString("Celular_Func");
                String usuario = rs.getString("Usuario_Func");
                String senha = rs.getString("Senha_Func");
                model.addRow(new Object[]{codigo, nome, cargo, celular, usuario, senha});
            }

        } catch (SQLException e) {
            System.out.println("Erro ao carregar dados: " + e.getMessage());
        }
    }

}
